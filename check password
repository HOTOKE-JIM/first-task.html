#include <iostream>
#include <string>
#include <cctype>
#include <regex>

bool checkPasswordLength(const std::string &password) {
    return password.length() >= 12 && password.length() <= 16;
}

bool hasUppercase(const std::string &password) {
    for (char ch : password) {
        if (isupper(ch)) return true;
    }
    return false;
}

bool hasLowercase(const std::string &password) {
    for (char ch : password) {
        if (islower(ch)) return true;
    }
    return false;
}

bool hasDigit(const std::string &password) {
    for (char ch : password) {
        if (isdigit(ch)) return true;
    }
    return false;
}

bool hasSpecialCharacter(const std::string &password) {
    const std::string specialCharacters = "!@#$%^&*";
    for (char ch : password) {
        if (specialCharacters.find(ch) != std::string::npos) return true;
    }
    return false;
}

bool isCommonPassword(const std::string &password) {
    const std::regex commonPatterns("(password|12345|qwerty)", std::regex_constants::icase);
    return std::regex_search(password, commonPatterns);
}

bool hasPersonalInfo(const std::string &password, const std::string &personalInfo) {
    return password.find(personalInfo) != std::string::npos;
}

bool isValidPassword(const std::string &password, const std::string &personalInfo) {
    if (!checkPasswordLength(password)) {
        std::cout << "Password must be between 12-16 characters long.\n";
        return false;
    }
    if (!hasUppercase(password)) {
        std::cout << "Password must include at least one uppercase letter.\n";
        return false;
    }
    if (!hasLowercase(password)) {
        std::cout << "Password must include at least one lowercase letter.\n";
        return false;
    }
    if (!hasDigit(password)) {
        std::cout << "Password must include at least one number.\n";
        return false;
    }
    if (!hasSpecialCharacter(password)) {
        std::cout << "Password must include at least one special character (!@#$%^&*).\n";
        return false;
    }
    if (isCommonPassword(password)) {
        std::cout << "Password is too common. Avoid dictionary words or simple patterns.\n";
        return false;
    }
    if (hasPersonalInfo(password, personalInfo)) {
        std::cout << "Password contains personal information. Avoid using your name, birthdate, etc.\n";
        return false;
    }
    return true;
}

int main() {
    std::string password;
    std::string personalInfo;

    std::cout << "Enter a password: ";
    std::getline(std::cin, password);

    std::cout << "Enter personal information to check against (e.g., name, birthdate): ";
    std::getline(std::cin, personalInfo);

    if (isValidPassword(password, personalInfo)) {
        std::cout << "Password is valid and secure!\n";
    } else {
        std::cout << "Password is not secure. Please try again.\n";
    }

    return 0;
}